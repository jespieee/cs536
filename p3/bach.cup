/**********************************************************************
 Java CUP specification for a parser for bach programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).lineNum,
                     ((TokenVal)currToken.value).charNum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                BOOLEAN;
terminal                INTEGER;
terminal                VOID;
terminal                STRUCT;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLIT;
terminal StrLitTokenVal STRINGLIT;
terminal TokenVal       TRUE;
terminal TokenVal       FALSE;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                LSQUARE;
terminal                RSQUARE;
terminal                COLON;
terminal                COMMA;
terminal                DOT;
terminal                AND;
terminal                OR;
terminal                NOT;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                EQUALS;
terminal                NOTEQ;
terminal                GREATER;
terminal                GREATEREQ;
terminal                LESS;
terminal                LESSEQ;
terminal                READOP;
terminal                WRITEOP;
terminal                ASSIGN;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                RETURN;
terminal                INPUT;
terminal                DISPLAY;
terminal                IF;
terminal                ELSE;
terminal                WHILE;

/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */

non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal VarDeclNode      varDecl;
non terminal TypeNode         type;
non terminal IdNode           id;
non terminal LinkedList       structBody; 
non terminal StructDeclNode   structDecl;
non terminal LinkedList       varDeclList; 
non terminal ExpNode          loc;
non terminal FormalDeclNode   formalDecl;
non terminal LinkedList	      formalsList;
non terminal FuncDeclNode     funcDecl;
non terminal FuncBodyNode     funcBody;
non terminal StmtNode         stmt;
non terminal LinkedList       stmtList;
non terminal FormalsListNode  formals;
non terminal AssignExpNode    assignExp;
non terminal ExpNode          exp;
non terminal CallExpNode      funcCall;
non terminal ExpNode          term;
non terminal LinkedList       actualList;

/* NOTE: Add precedence and associativity declarations here */

precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence left COLON;
precedence nonassoc LESS, GREATER, LESSEQ, GREATEREQ, EQUALS, NOTEQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left NOT;
start with program;

/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList:d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

loc             ::= id:i
                {:   
                    RESULT = i;
                :}
                | loc:l COLON id:i
                {:
                    RESULT = new StructAccessExpNode(l, i);
                :}
                ;

type            ::= INTEGER
                {: 
                    RESULT = new IntegerNode();
                :}
                | BOOLEAN
                {: 
                    RESULT = new BooleanNode();
                :}
                | VOID
                {: 
                    RESULT = new VoidNode();
                :}
                ;

id              ::= ID:i
                {: RESULT = new IdNode(i.lineNum, i.charNum, i.idVal);
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl          ::= varDecl:v
              {: RESULT = v;
              :}
              | structDecl:s 
              {: RESULT = s;
              :}
              | funcDecl:f
              {: RESULT = f;
              :}
              ;

varDeclList     ::= varDeclList:vl varDecl:v
                {:
                    vl.addLast(v);
                    RESULT = vl;
                :}
                | /* epsilon */
                {:
                    RESULT = new LinkedList<VarDeclNode>();
                :}
                ;

varDecl         ::= type:t id:i DOT
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NON_STRUCT);
                :}
                | STRUCT id:i1 id:i2 DOT
                {: RESULT = new VarDeclNode(new StructNode(i1), i2, 1);
                :}
                ;

structDecl      ::= STRUCT id:i LSQUARE structBody:sb RSQUARE
                {: RESULT = new StructDeclNode(i, new DeclListNode(sb));
                :}
                ;

structBody      ::= structBody:sb varDecl:v
                {: sb.addLast(v);
                RESULT = sb;
                :}
                | varDecl:v
                {: LinkedList list = new LinkedList<VarDeclNode>();
                    list.addLast(v);
                    RESULT = list;
                :}
                ;

formals       ::= LSQUARE RSQUARE
              {: RESULT = new FormalsListNode(new LinkedList<FormalDeclNode>());
              :}
              | LSQUARE formalsList:fl RSQUARE
              {: RESULT = new FormalsListNode(fl);
              :}
              ;
	
formalsList   ::= formalDecl:f
              {: LinkedList list = new LinkedList<FormalDeclNode>();
                  list.addLast(f);
                  RESULT = list;
              :}
              | formalDecl:fd COMMA formalsList:fl
              {: fl.addFirst(fd);
                 RESULT = fl;
              :}
              ;

formalDecl    ::= type:t id:i
              {: RESULT = new FormalDeclNode(t, i);
              :}
              ;
				
funcDecl      ::= type:t id:i formals:f funcBody:fb
              {: RESULT = new FuncDeclNode(t, i, f, fb);
              :}
              ;	

funcBody      ::= LSQUARE varDeclList:vd stmtList:sl RSQUARE
              {: RESULT = new FuncBodyNode(new DeclListNode(vd), new StmtListNode(sl));
              :}
              ;
	
stmtList      ::= stmtList:sl stmt:s
              {: sl.addLast(s);
                  RESULT = sl;
              :}
              | /* epsilon */
              {: RESULT = new LinkedList<StmtNode>();
              :}
              ;

stmt          ::= assignExp:a DOT
              {: RESULT = new AssignStmtNode(a);
              :}
              | loc:l PLUSPLUS DOT
              {: RESULT = new PostIncStmtNode(l);
              :}
              | loc:l MINUSMINUS DOT
              {: RESULT = new PostDecStmtNode(l);
              :}
              | funcCall:f DOT
              {: RESULT = new CallStmtNode(f);
              :}
              | RETURN exp:e DOT
              {: RESULT = new ReturnStmtNode(e);
              :}
              | RETURN DOT
              {: RESULT = new ReturnStmtNode(null);
              :}
              | INPUT READOP loc:l DOT
              {: RESULT = new ReadStmtNode(l);
              :}
              | DISPLAY WRITEOP exp:e DOT
              {: RESULT = new WriteStmtNode(e);
              :}
              | WHILE LPAREN exp:e RPAREN LCURLY varDeclList:vd stmtList:sl RCURLY
              {: RESULT = new WhileStmtNode(e, new DeclListNode(vd), new StmtListNode(sl));
              :}
              | IF LPAREN exp:e RPAREN LCURLY varDeclList:vd stmtList:sl RCURLY
              {: RESULT = new IfStmtNode(e, new DeclListNode(vd), new StmtListNode(sl));
              :}
              | IF LPAREN exp:e RPAREN LCURLY varDeclList:vd1 stmtList:sl1 RCURLY ELSE LCURLY varDeclList:vd2 stmtList:sl2 RCURLY
              {: RESULT = new IfElseStmtNode(e, new DeclListNode(vd1), new StmtListNode(sl1), new DeclListNode(vd2), new StmtListNode(sl2));
              :}
              ;

assignExp     ::= loc:l ASSIGN exp:e
              {: RESULT = new AssignExpNode(l, e);
              :}
              ;

exp           ::= assignExp:a
              {: RESULT = a;
              :}
              | exp:e1 PLUS exp:e2
              {: RESULT = new PlusNode(e1, e2);
              :}
              | exp:e1 MINUS exp:e2
              {: RESULT = new MinusNode(e1, e2);
              :}
              | exp:e1 TIMES exp:e2
              {: RESULT = new TimesNode(e1, e2);
              :}
              | exp:e1 DIVIDE exp:e2
              {: RESULT = new DivideNode(e1, e2);
              :}
              | NOT exp:e
              {: RESULT = new NotNode(e);
              :}
              | exp:e1 AND exp:e2
              {: RESULT = new AndNode(e1, e2);
              :}
              | exp:e1 OR exp:e2
              {: RESULT = new OrNode(e1, e2);
              :}
              | exp:e1 EQUALS exp:e2
              {: RESULT = new EqualsNode(e1, e2);
              :} 
              | exp:e1 NOTEQ exp:e2
              {: RESULT = new NotEqNode(e1, e2);
              :} 
              | exp:e1 LESS exp:e2
              {: RESULT = new LessNode(e1, e2);
              :} 
              | exp:e1 GREATER exp:e2
              {: RESULT = new GreaterNode(e1, e2);
              :} 
              | exp:e1 LESSEQ exp:e2
              {: RESULT = new LessEqNode(e1, e2);
              :} 
              | exp:e1 GREATEREQ exp:e2
              {: RESULT = new GreaterEqNode(e1, e2);
              :} 
              | MINUS term:t
              {: RESULT = new UnaryMinusNode(t);
              :} 
              | term:t
              {:RESULT = t;
              :} 
              ;

term          ::= loc:l
              {: RESULT = l;
              :}
              | INTLIT:i
              {: RESULT = new IntLitNode(i.lineNum, i.charNum, i.intVal);
              :}
              | STRINGLIT:s
              {: RESULT = new StringLitNode(s.lineNum, s.charNum, s.strVal);
              :}
              | TRUE:t
              {: RESULT = new TrueNode(t.lineNum, t.charNum);
              :}
              | FALSE:f
              {: RESULT = new FalseNode(f.lineNum, f.charNum);
              :}
              | LPAREN exp:e RPAREN
              {: RESULT = e;
              :}
              | funcCall:f
              {: RESULT = f;
              :}
              ;

funcCall      ::=  id:i LPAREN RPAREN
              {: RESULT = new CallExpNode(i, null);
              :}
              | id:i LPAREN actualList:l RPAREN
              {: RESULT = new CallExpNode(i, new ExpListNode(l));
              :}
              ;
	
actualList    ::= exp:e
              {: LinkedList list = new LinkedList<ExpNode>();
                  list.addLast(e);
                  RESULT = list;
              :}
              | actualList:l COMMA exp:e
              {: l.addLast(e);
                 RESULT = l;
              :}
              ;